---------------------------------------------------------------------------------------------------
--Sudorku, by dragaron-----------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
--INITIALIZATION START-----------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
--Load default palette
color.loadpalette()

	--Setup directory
	if files.exists("samples/sudorku.lua") then
	dir = "samples/sudorku/"
	else
	dir = "resources/"
	end

	--Read from, or create if nonexistent, "config.ini" file
	if files.exists(dir .. "config.ini") then
	screen.print(10, 10, "Loading...")
	screen.flip()
	puzzle = tonumber(ini.read(dir .. "config.ini", "puzzle", 1))
	theme_slot = tonumber(ini.read(dir .. "config.ini", "theme_slot", 0))	
	themes = {}
		for i = 1, 10 do
		themes[i] = ini.read(dir .. "config.ini", "themes[" .. i .. "]", "255255255050000050000255090090090255255255255255255255255030000000000050130130130255255255255255255255255255255255255255255255180255255255255030")
		end
	puzzle_best = {}
		for i = 1, 201 do
		puzzle_best[i] = tonumber(ini.read(dir .. "config.ini", "puzzle_best[" .. i .. "]", 3599))
		end
	else
	ini.write(dir .. "config.ini", "puzzle", 1)
	puzzle = tonumber(ini.read(dir .. "config.ini", "puzzle", 1))
	ini.write(dir .. "config.ini", "theme_slot", 0)
	theme_slot = tonumber(ini.read(dir .. "config.ini", "theme_slot", 0))
	themes = {}
		for i = 1, 10 do
		ini.write(dir .. "config.ini", "themes[" .. i .. "]", "255255255050000050000255090090090255255255255255255255255030000000000050130130130255255255255255255255255255255255255255255255180255255255255030")
		themes[i] = ini.read(dir .. "config.ini", "themes[" .. i .. "]", "255255255050000050000255090090090255255255255255255255255030000000000050130130130255255255255255255255255255255255255255255255180255255255255030")
		end
	puzzle_best = {}
		for i = 1, 201 do
		screen.print(160, 230, "Please wait while the 'config.ini' file is created (only happens once)...")
		draw.rect(160, 260, 203, 20, color.white)
		draw.fillrect(161, 261, i-1, 18, color.gray)
		screen.flip()
		puzzle_best[i] = 3599
		ini.write(dir .. "config.ini", "puzzle_best[" .. i .. "]", puzzle_best[i])
		end
	end


--COLORS-------------------------------------------------------------------------------------------


--FONTS--------------------------------------------------------------------------------------------
IMPACT = font.load(dir .. "IMPACT.TTF")
LSANS = font.load(dir .. "LSANS.TTF")
LSANSD = font.load(dir .. "LSANSD.TTF")
CONSOLA = font.load(dir .. "CONSOLA.TTF")
CONSOLAB = font.load(dir .. "CONSOLAB.TTF")


--VFX----------------------------------------------------------------------------------------------


--SFX----------------------------------------------------------------------------------------------
sfx_switch = sound.load(dir .. "sfx_switch.mp3")


--BOOLEONS-----------------------------------------------------------------------------------------


--VARIABLES----------------------------------------------------------------------------------------
spacing = 60
starting_x = 1
starting_y = 1
game_complete = 0
theme_x = 1
theme_y = 1


--TABLES-------------------------------------------------------------------------------------------
puzzle_problem = {
"37.9..5..1.8.439..4..6...1.9...6.24..6.3.9.8..13.8...5.3...2..7..547.1.2..2..1.69",
"...2...349.781..6..629..7..75...21..8..6.5..3..43...27..9..685..3..496.151...8...",
".2415..6...5..4..38.9..2.4...6.7..327..3.9..814..8.9...6.9..3.52..8..1...9..1327.",
"...729...23..6.81.5.6....7...8..14636..2.3..79536..1...1...75.6.79.1..828..342...",
"3....27.8.71..8.....6.93.129..6..54..8.2.7.6..47..5..143.81.2.....5..69.5.23....4",
"18..9.6...3942....54....2.7.6...5..49.57.13.88..9...2.2.7....36....7451...3.1..89",
".7....3919.8..3..4..1.52....2..9581...36.87...5612..4....47.1..4..2..5.8632....7.",
"836..2...7.548.9...1..6.2.5.4.13....39.....27....97.4.6.9.1..7...2.781.3...5..468",
"2.38..4.9..46537...6.2....3.9.7....67.5...1.83....2.5.5....8.7...23178..1.8..96.4",
"..6.85..17.3..6.4..1.9...25...74.2189.......3148.62...48...3.5..6.2..7.43..57.9..",
".8.1.5..44....2.9172..96.....627.9..1.5...7.2.97.613....432..8791.8....63..6.4.2.",
"...3..4.983.2...1..1265...87.1..3.5...68.79...4.9..1.39...4258..2...8.675.7..6...",
"63..75..99.2.1.7.5...4...2.785..23....4...1....38..276.5...6...3.9.4.8.78..32..41",
"4...85.71...6..95329..1.8....317.....72...48.....283....1.9..64957..4...68.35...2",
"1..6.5..8.95.13..4.3.....65.2657......12.89......3924.76.....8.2..74.53.4..9.2..1",
"....37.1.7....8.64289...3....865.14..9.4.2.3..26.817....3...59154.9....7.1.86....",
"...5...1.83..26..49.4.3.7.6..62..149..8...3..592..46..1.9.8.2.77..19..65.2...3...",
"2...584...4.3..87.1.6..2.9.594.27.....3...1.....69.547.2.7..9.6.59..1.8...186...3",
"645..9.....14..27..8.53...439..4.6....61.38....4.9..575...16.3..29..75.....2..798",
"4.9.57..63251......8..3.4.1.7..28....62...91....96..7.6.3.8..9......45371..59.2.8",
".....5..7.96.2.18.2.413.9..6359...1..4.....2..1...3679..8.675.1.67.4.83.3..2.....",
"3...189.....7..254.27..5.3..6..2.3.5.8.1.9.4.9.2.6..8..1.6..57.836..2.....439...6",
"..6...1.29..3.5..7.8427...5...82.51..3.5.6.9..57.43...7...9438.6..1.8..98.1...4..",
"6....5.87957...3......14.9..89.714...3.2.8.5...694.12..9.63......3...54281.4....6",
".72.691..6...2.85.5934........27...316.....783...86........1597.41.5...2..839.46.",
"7...64...2.3..95...1....73986.74..5.9..8.2..1.4..36.72498....1...54..2.6...51...7",
".1..286.55....6.14.39..4....45..3..9..37.18..2..4..57....8..72.87.1....61.269..3.",
"1.2.....7..81.24....9.47.26...23..15.6.5.8.4.95..76...72.39.5....46.59..8.....3.1",
"76..8..29...3..7...51.92.6.294..7..13.......81..4..957.4.17.38...2..5...61..3..94",
".64...8.5.73.1...621.95.....8...37..6.71.53.2..92...4.....89.634...3.17.8.5...29.",
"6...54.8292..7.1.....9..357..486.....89...63.....314..457..2.....8.1..7613.58...9",
"...8...91.684..3..4.327..6...19...832..6.5..935...87...9..146.7..4..625.57...2...",
"2.1.75.....8..23.76..3.48...5.21..7..43...21.71..53.9...95.8..23.76..5...8.92.1.6",
"42..96.7.6583.......9.2..18..5.19...9.7...1.4...24.5..37..8.2.......7486.1.56..39",
".78.5..425.9....6....386...793..5..4..57.86..2..4..751..2817....4.6..5.936..4.82.",
"67.4...529..832..6.2.5..8...8.9..7..14.....93..3..5.2...9..4.3.4..219..586...7.14",
"...81.56...9.5..742.1....838....3.9.7.62.43.5.1.5....796....2.157..4.6...43.28...",
"9258.......1.4..6574..19.3....47.2..1.3...6.7..2.61....6.29..8183..5.4.......3759",
"...954...65..3.2.1.83.....4896..31...3.6.5.4...21..7631..4..83.4.9.1..52.2.576...",
"3.6...51.92.31....4.8.2..7...42....1.625.849.7....63...9..8.2.4....53.68.51...7.9",
"2...593.8.4.3..5..3..8..17.48..6.2...7.1.4.6...1.7..93.54..1..2..9..7.8.6.849...1",
"...3..71.3.59....229.48.5..1..7..32..4.5.6.7..26..3..8..7.19.859....56.4.68..4...",
"4.9...21.85..13...7.6.8..4...3..5..9.471.865.2..6..7...9..6.8.7...32..64.21...5.3",
"..76854...24..961..6...1..58..1...6..93...87..5...7..27..9...8..452..93...97361..",
"3..8..97..6.24.8..12...5..6...18.463.9.....5.641.37...2..9...34..5.72.9..37..1..8",
"23.4...67.7.6..9..5..917..2.9.5..3..84.....51..1..6.7.4..785..6..5..4.1.92...3.84",
"...9..3.6.2675...439.2...7.8.1..4.5...43.29...6.8..1.3.1...7.822...6971.4.5..8...",
"238...4......46..7.6...2.95..251.7.98..9.3..43.5.276..91.8...6.7..25......4...178",
".15..4..2.4..879..9..6..7.3...52.839..6...1..289.43...8.2..1..7..175..6.4..3..25.",
"..7..2.5.2....689.3..15..267.6.4..3...87.94...9..8.1.246..17..9.759....3.1.8..6..",
"23.....6597.52.4......6.........63.7..3...6..6.47.........5......8.91.4316.....59",
"..8.3.1..2..6.7..4.6.8.5.7.5.4...6.1.2.....5.9.7...3.2.7.3.1.2.8..5.4..6..6.7.9..",
".54.3.98...69.85...8.....1....3.9....9.....7....1.5....7.....4...37.46...61.5.29.",
"9.......51..7.8..9.78...23..9..3..2.3..5.2..6.5..6..4..65...81.4..8.1..72.......4",
"6..3.4..1.5..7..6...89.27..82.....75..4...8..96.....34..74.16...9..2..1.3..7.6..8",
".9.7.1.3.7..8.2..1..8.4.5...23...75.9.......2.61...49...7.1.6..1..4.5..9.8.2.3.7.",
"48..2..96.7.1.6.8...........25...16.7.3...9.5.48...72...........6.9.7.5.23..4..71",
".71...8...628..5.....91..4..3.7.....82.....63.....8.5..9..81.....3..761...8...39.",
".2..7..8.3.......1..81.34..93.6.2.74...7.4...14.3.5.26..92.15..7.......9.5..6..4.",
".4.7.9.2.3...5...4..7...9..7.83.62.5...2.5...2.91.76.3..5...8..1...6...2.8.9.3.1.",
"9...1...4..42.73...8.5.6.1.4.5...7.2.7.....8.6.8...9.1.1.7.3.4...21.48..5...6...3",
"2.489..7.3.9...8.6....6.....762......3.....6......623.....8....6.5...4.8.1..453.7",
".9.....4.3..7.8..171.....62..78423.............19654..95.....276..3.1..5.7.....3.",
"..3.5.6...6.9.3.8.8..2.1..52.4...8.6.3.....4.9.7...2.36..7.5..9.1.6.4.7...5.2.3..",
"..97.56..2.4.1.7.3..........62...93.74.....56.81...27..........1.8.2.5.9..79.38..",
"...436...37.1.9.249...2...6.6.....3.1.......8.9.....4.8...4...174.8.1.95...752...",
"..6...2.1..2..58.71...67........6..946.....282..5........17...38.46..9..5.7...6..",
"..2...8..1...4...5.5.2.8.7.7.89.23.1...7.4...2.61.37.4.6.8.1.9.9...3...7..4...6..",
"7.8...2.5....5.....6..284.1.....734..4.....7..173.....3.259..1.....7....4.9...5.7",
"6...2...7.1.5.3.2...74.89..3.1...6.2.8.....1.7.5...8.4..42.71...2.8.9.7.5...3...9",
".1..8..7.65.2.1.48...457...1.......4.2.....3.7.......5...698...46.3.2.91.3..4..2.",
".615.932....813.....5.2.8...8.....1...9...7...5.....3...7.3.9.....246....369.745.",
"..46..53...6...27..8.12.......7...9.93.....56.4...6.......62.1..19...6...23..79..",
"8...9...6..64.21...5.7.3.9.3.5...8.9.2.....5.6.7...2.4.9.2.1.6...49.65..7...3...1",
"..1.6.8.....253...6.21.85.49.......7..8...1..4.......62.78.46.3...679.....4.3.9..",
"9.1...6.2.7.....4..5.9.1.7...4.8.3...6.2.4.8...7.6.2...3.5.9.1..2.....3.4.8...5.9",
"...237....4..5..8..364.857...9...1...8.....4...5...6...526.479..1..2..6....195...",
".2.8.5.9.5.......814..6..72...9.1...8.......1...7.6...31..9..567.......3.6.1.3.2.",
"...642...48.9.7.529...5...6.9.....2.7.......3.6.....4.3...2...782.7.3.91...518...",
".8.2.3.6.5...9...7..48.72..9.5...4.8.3.....5.1.2...9.3..79.61..2...7...5.1.4.5.2.",
".5..9..1.3..4.6..8..45.26..76.....93..3...2..28.....41..69.13..5..2.8..4.4..6..7.",
"3.......5.62.4.71.9..7.3..8.1..2..5....4.9....5..3..8.1..2.6..4.86.9.37.5.......2",
"...6.5....26...57.98.....244..2.9..1...5.7...6..1.3..873.....86.98...34....8.4...",
".3.....4..89...51...69.78..8..312..4.........9..745..6..16.82...23...95..9.....6.",
"7..8.1..96.4...7.8..3...2...3.245.7...........9.136.8...9...8..8.6...5.25..9.7..4",
"..1.9.7...3.....2.7..5.8..3.987.415....1.2....128.943.1..4.5..6.5.....4...6.2.8..",
"2...5...3.3.1.2.7...78.45..9.8...3.7.2.....9.6.1...2.8..36.51...4.3.9.6.5...8...2",
"2..1.4..518..7..93.........9.1...6.7.24...31.5.8...2.9.........45..9..766..5.8..1",
"5.......397.....51.6.3.8.9...87692.............54213...3.5.4.8.85.....167.......2",
"..94.36..6.......7.1.6.2.5.1..248..3..4...2..8..367..1.8.5.1.4.9.......5..38.67..",
".14...56..3.8.7.4...6...8..6..295..8.........7..134..9..1...9...8.6.2.7..67...35.",
"9.......454.....68.8.7.9.2...38267.............95314...7.1.4.9.25.....473.......6",
"..41.87..7...6...2.8.....1.25.9.1.84...4.6...64.2.5.31.3.....6.4...5...9..98.23..",
"1.6.5.4.22..6.8..9.........68.....75.17...93.59.....24.........7..9.1..69.8.4.5.3",
".8..916.7....3....3.1...9.5.573......3.....5......738.1.6...2.3....1....8.526..4.",
"..8.2.1...251.946....845....4.....8...3...9...5.....1....276....179.365...9.5.3..",
".........36.....745.1.2.9.3.3.1.8.2.8.......6.5.6.3.9.6.5.3.2.797.....81.........",
"..91.53..3..4.2..6.1..6..9.58.....21..1...7..27.....39.6..2..1.9..6.8..5..47.98..",
"...3.5....83...95.1.5...8.65..8.7..1...6.4...7..9.2..33.2...5.9.46...21....4.1...",
"8...9...2..31.69...2.4.7.5.21.....74..7...3..63.....89.4.9.2.3...97.52..1...6...5",
"...38...9...5.94........825...29...7.1.....5.6...78...932........86.1...1...43...",
"..3..52...6.8....1.27..3..8.51......6.......3......49.3..1..84.2....6.1...85..7..",
".4.5..8.3..9.7.1.....3...9....9..2.4.6.....1.5.2..8....8...7.....7.1.6..9.5..6.7.",
"...8..7.96.9.7.....2.1...65..7....86.........18....2..25...3.9.....6.1.23.1..4...",
".8...16.35...4...7.....6.5.9.13......2.....7......58.9.3.4.....4...7...21.52...4.",
".85...4.....6.1.2.7.6..........1...7.4.2.5.9.1...7..........5.2.2.4.3.....9...68.",
".3...452......53....9.1...8.....81.2.2.....6.7.53.....3...6.2....79......684...1.",
"..1..4.735.2...8...7..1...9...6..78...........45..7...9...6..5...3...2.881.2..4..",
"..34...1.8....5..92.9..8.4.......6.7.3.....8.1.5.......8.1..7.44..5....2.9...31..",
"5..6.9.....6.47...439........1.63....9.....2....41.8........673...75.2.....2.8..4",
"8.....5.9.....64...1..7...3.7..1..5....6.4....2..9..6.3...8..1...14.....5.9.....7",
"7....2..3.8.9..6..53...79.........41..8...7..62.........76...19..3..8.6.9..2....5",
"6...4...7.7...63.1.....7.9......91.5.4.....6.5.23......3.8.....9.81...2.4...7...3",
"1.67...4..9.4.....4...3...7.....65.2.7.....3.2.19.....6...4...3.....8.6..5...18.9",
"..3..2.8.48...9..69.....15....7...4...8...7...2...3....61.....55..3...24.3.5..9..",
".617...2.8..2..7...2....3.5.....71..4.......9..64.....5.2....8...9..1..7.3...896.",
"7.....9.5.3..6...4...2..3...1..9..8....1.2....5..3..7...2..1...4...7..3.9.5.....6",
"..2.9.6...6...24.8.....6.7.3.58......9.....2......75.4.8.1.....1.74...3...9.6.8..",
".52.........2.8..43.9...1......8..5.1..4.9..6.8..5......6...2.34..1.7.........94.",
"3..2....9..1..4.8...49...35.......21..9...8..67.......46...19...1.8..3..5....2..4",
"67..........8.97..1.4.....5.2..3......56.79......2..3.9.....4.6..73.1..........21",
".1.9.....8.43...9.9...7...35.81......3.....7......42.54...9...7.2...86.1.....6.4.",
".7..2...9..3...81.61.8..5..5.9..4...............2..4.1..6..5.34.98...1..4...6..7.",
".8...5..1..7..328.64....3...2.9.....9.......8.....1.5...4....76.521..4..3..4...1.",
"..93..7...2.7..1.9.5...2..84.6.......7.....8.......5.35..8...9.6.2..5.7...1..32..",
".4.62....275......1..7.4....9.54......7...3......92.8....8.3..2......645....16.3.",
"2....65...9.7...3.6..3..91..84......3.......5......72..68..2..3.1...7.6...25....9",
"34..........6.41...52....7.....6...3..75.18..6...3.....8....24...19.7..........51",
".....82....1.7...9.5...437.1.53......7.....1......96.2.164...9.3...5.8....96.....",
"1....25.9.....467..69.7.....7....9.4.........4.2....1.....9.12..283.....5.18....6",
"3....658...7.9..1.68......42.8..9...............2..3.78......76.1..5.2...423....5",
"74..1.......8...14..62..7.52.8....6...........1....8.76.5..34..32...9.......7..26",
"..1....678....2.9..94..15...2...8...9.......3...3...4...68..42..8.6....175....6..",
".2...51...5.4..8.68..3....49.7.......4.....1.......3.26....3..55.9..2.4...21...8.",
"1..3..42....1....6.3..9..1..57..4...9.......3...6..25..9..1..4.4....8....68..2..7",
"......931...7.9.4.....357....236....8.......9....716....854.....3.8.2...517......",
".523.......4.2....7.9......5....9.86.9.5.3.7.28.4....1......4.9....6.8.......156.",
"2..9..87...5.1..3.97......4.....62.5.........6.71.....7......59.3..8.6...46..2..8",
"..1.2.8..7..5..46....6....1...1..37.9.......8.53..4...4....2....15..9..2..2.8.9..",
"25......9.4...8...6...1.4....3.5.7.....8.7.....9.4.2....4.9...6...7...8.1......25",
"..8.2.4..4....6....63..7..9.91..4...8.......5...3..17.2..5..74....2....3..5.8.2..",
"..79...4...3..4.622....5..845.........9...3.........163..5....787.3..2...9...24..",
"...35..1.......562...6.14.....21..8.7.......6.9..85.....59.7...312.......7..43...",
"..8.9.3...4...8...7.5..3.8....7..6.2.3.....9.5.6..4....2.5..4.1...1...7...7.8.9..",
"6....523...5.1.6.......6..8.....872.1.......5.473.....3..9.......1.6.3...982....4",
"598......6..2.3....3..78......59..4...3...1...2..46......86..9....1.9..7......516",
"..16.....46.5..7..9...3...1.....4.52..9...8..27.1.....8...9...3..3..8.15.....34..",
"......519...4.32......81..37..59.....6.....3.....72..49..12......86.9...652......",
"......476...6.92.....14...95...34....8.....6....79...38...21.....45.8...917......",
"..74..2.3...3....75...1..8....8...21..2...6..39...7....7..6...29....5...8.6..41..",
"...2......8.....65...1.87..6.8..4.7...........7.9..5.3..17.9...23.....4......5...",
".6.2..5.......3.91..7.......4.5..8.2....4....8.5..1.7.......3..29.4.......6..9.1.",
"1.........9.....8......75.36...514....4...3....568...74.82......2.....7.........9",
"......7.6...53....62....9....6.7..28.........17..6.4....8....95....41...3.1......",
"...1.3..8..5...9....2.6..7.93.........7...1.........62.6..2.4....4...7..1..8.9...",
"..2..397.....9...1..6..5...1....2.....3...1.....3....6...7..2..8...6.....958..7..",
".4.8....25.9..........7.9..6..5...3..8..1..4..3...9..7..6.5..........3.68....7.1.",
".....569.....4.....8.1.2...6......25.5.....3.17......6...7.3.4.....6.....258.....",
".3...2...7..8....1.8..5.49...2..4.......2.......5..8...94.3..5.6....9..3...4...8.",
"3....14.....7..536...8...1........92....2....87........2...9...619..8.....31....4",
".......8.....53.9.1..2..6....5.....46..3.9..19.....2....3..7..5.1.68.....4.......",
".2.........9..1..5...5.4.1.8..3...7...6...2...3...8..6.6.8.5...4..6..1.........9.",
"..74.....3..8.......9.21..6......425.........893......4..18.5.......2..7.....91..",
"15.....87..4..5.2....7.......9..1.3.....2.....4.5..9.......7....9.6..4..32.....18",
"..1....56.9...67......2.......5.8..1..4...9..6..4.7.......3......26...7.38....4..",
"..9....4.8..5..9...1..7......68....3.5..1..7.3....62......4..8...3..9..7.2....5..",
".34..5........18..6...9..7.86.......9.......4.......27.1..7...3..69........2..19.",
".6...71......4.....25.....9..8..5...5..2.8..6...7..2..1.....42.....3......98...5.",
".47.........5....4.9..2..3....7...86..8...5..41...3....2..3..1.9....1.........69.",
".4.6.......72...413...8...........69..1...3..75...........9...769...58.......3.2.",
"5...7.8.......1.43.9.......1.....46....1.5....36.....7.......3.94.6.......7.2...9",
"....98.....4...2.7.....1..89.2..56.............57..4.92..8.....5.7...3.....12....",
"1..87..2..3....5....86....9...9....4....3....4....8...2....76....5....1..7..49..3",
".2.6..1.........4...3.9...8.....5.93..6...2..28.7.....5...1.4...6.........1..9.5.",
"....451..53.9..........7..6..4....27.........18....4..7..3..........8.93..216....",
"....5...3..98.......79.6..2.2......63...4...89......1.4..6.31.......15..6...2....",
".43......1..6......7....2.92.1..3......971......2..8.65.6....8......8..3......47.",
"1...8.6...5.....4..6...3......59...4..8...7..3...28......4...2..7.....1...9.3...5",
".8.6.1.....7.....3.....3.45......2..2..7.4..8..9......74.3.....5.....8.....2.9.1.",
".8.......72..5.........951.....1..24...7.3...89..6.....423.........4..61.......7.",
"...6....924....3...3.4...1..6..9......1.3.7......7..8..2...9.4...3....624....8...",
"..2.9..........145...7...6.7....6..9..8...5..4..2....3.1...7...253..........5.8..",
"8....6....1..4...3......21..4.....62...1.7...95.....7..31......6...9..4....8....7",
"2..5......1....58....7...93...8..7.6....1....4.6..2...76...4....49....2......3..1",
".....38..72..4...5...7...2.4.16.........5.........74.8.3...8...5...1..67..95.....",
"12......6.....78.1....4.9..5.16.........3.........87.9..7.9....8.62.....4......58",
"5..6....1.3..5.7........6......4..8.24.....36.7..9......1........5.3..9.3....4..2",
".....927.1..5...8...63.........4...5.8.....9.7...8.........21...2...3..4.596.....",
".1...75......8..975..2.....1..7......4.....5......5..2.....3..639..5......24...8.",
"...5.4..3.5.............62...5.8.7....41.93....3.2.9...28.............4.7..6.1...",
".....3......61.9..9.2.....55....9.2...1...5...4.7....87.....6.9..3.41......8.....",
"..2..4..1.......436...8....1....6.3..5.....2..3.4....9....7...259.......7..5..8..",
"...37......3.....8.56....9....59...12.......59...64....8....42.1.....7......39...",
"..6......28.3...4.....9..5..5..7...1...2.9...4...1..3..1..4.....4...3.82......9..",
".....45.1.....8...2.5....6..56..3....4..2..8....9..75..3....2.5...1.....9.73.....",
"9..6...1...4..3..7.5.....2......28..2...1...3..67......8.....5.1..8..2...3...7..4",
"..83...6.......7.8....92...7.3.4.....2.....9.....1.5.6...13....8.6.......9...54..",
"2.....1......8..35..4..6.....7..5..8.6.....1.3..9..4.....3..5..81..4......2.....7",
".8...216...4.....9.7...5...1.8.......2.....8.......9.4...7...2.3.....5...561...4.",
"2.......3.1..84...8..1...9..54.3.................9.26..3...1..6...56..7.7.......9",
"8..........36......7..9.2...5...7.......457.....1...3...1....68..85...1..9....4..",
}

puzzle_solution = {
"376918524158243976429657318987165243564329781213784695631892457895476132742531869",
"185267934947813265362954718753492186821675493694381527479136852238549671516728349",
"324158769615794823879632541986571432752349618143286957461927385237865194598413276",
"184729635237465819596138274728951463641283957953674128312897546479516382865342791",
"394162758271458936856793412923681547185247369647935821439816275718524693562379184",
"182597643739426851546138297361285974925741368874963125217859436698374512453612789",
"275864391968713254341952687724395816193648725856127943589476132417239568632581479",
"836952714725481936914763285247136859391845627568297341689314572452678193173529468",
"253871469914653782867294513491785326725936148386142957539468271642317895178529634",
"296485371753126849814937625635749218972851463148362597487693152569218734321574986",
"689135274453782691721496853846273915135948762297561348564329187912857436378614529",
"675381429839274615412659738791423856356817942248965173963742581124598367587136294",
"638275419942613785517498623785162394264937158193854276451786932329541867876329541",
"436985271718642953295713846843179625172536489569428317321897564957264138684351792",
"174625398695813724832497165926574813341268957587139246769351482218746539453982671",
"654237918731598264289146375378659142195472836426381759863724591542913687917865423",
"267549813831726594954831726376258149418967352592314678149685237783192465625473981",
"237958461945316872186472395594127638763584129812693547328745916659231784471869253",
"645729183931468275782531964397845621256173849814692357578916432429387516163254798",
"419857326325146789786239451971328645862475913534961872653782194298614537147593268",
"183695247596724183274138956635972418749816325812453679428367591967541832351289764",
"345218967198736254627945138461827395783159642952463781219684573836572419574391826",
"576489132912365847384271965469827513238516794157943628725694381643158279891732456",
"641395287957826314328714695289571463134268759576943128495632871763189542812457936",
"872569134614723859593418726489275613165934278327186945236841597941657382758392461",
"759364128283179564614285739862741953937852641541936872498627315175493286326518497",
"417328695528976314639514287745283169963751842281469573396845721874132956152697438",
"142963857678152493539847126487239615263518749951476238726391584314685972895724361",
"763581429928364715451792863294857631375619248186423957549176382832945176617238594",
"964327815573814926218956437182643759647195382359278641721489563496532178835761294",
"673154982925378164841926357314869725789245631562731498457692813298413576136587249",
"725863491968451372413279865641927583287635149359148726892514637134796258576382914",
"231875964498162357675394821856219473943786215712453698169538742327641589584927136",
"421896375658371942739425618245719863987653124163248597376984251592137486814562739",
"678951342539274168124386975793165284415728693286493751952817436847632519361549827",
"678491352954832176321576849285943761146728593793165428519684237437219685862357914",
"437819562689352174251467983825173496796284315314596827968735241572941638143628759",
"925836174381742965746519832698475213153928647472361598567294381839157426214683759",
"217954386654837291983261574896743125731625948542189763165492837479318652328576419",
"376894512925317846418625973534279681162538497789146325693781254247953168851462739",
"216759348847316529395842176483965217972134865561278493754681932139527684628493751",
"684352719375961842291487563159748326843526971726193458437619285912875634568234197",
"439756218852413976716982345163275489947138652285694731394561827578329164621847593",
"917685423524379618368421795872143569493562871156897342731954286645218937289736154",
"354816972769243815128795346572189463893624157641537289216958734485372691937461528",
"239458167178632945564917832796541328842379651351826479413785296685294713927163584",
"547981326126753894398246571831694257754312968962875143619537482283469715475128639",
"238795416159346827467182395642518739871963254395427681913874562786251943524639178",
"715934682643287915928615743174526839536879124289143576852461397391752468467398251",
"687492351251376894349158726726541938138729465594683172463217589875964213912835647",
"231479865976528431485163972852946317793815624614732598349257186528691743167384259",
"748932165295617834361845279584723691623189457917456382479361528832594716156278943",
"154237986736918524289546713517389462398462175642175839975621348823794651461853297",
"946213785123758469578496231697134528314582976852967143765349812439821657281675394",
"679354281253178469148962753821643975734519826965287134587431692496825317312796548",
"692751834745832961318649527823194756974586312561327498257918643136475289489263175",
"481723596572196384396458217925374168713682945648519723857261439164937852239845671",
"471563829962874531385912746539746182827159463146238957694381275253497618718625394",
"521479683394826751678153492935612874862794315147385926489231567716548239253967148",
"546719328391852764827634951718396245634285179259147683965421837173568492482973516",
"926318574154297368783546219495681732271935486638472951819723645362154897547869123",
"264891573359724816187563942576239184432158769891476235743982651625317498918645327",
"892516743346728591715493862567842319489137256231965478953684127624371985178259634",
"423857691561943782879261435254379816136582947987416253648735129312694578795128364",
"319745682254618793876392415562174938743289156981536274495861327138427569627953841",
"251436879376189524984527316468295137132674958597318642825943761743861295619752483",
"756849231942315867183267495378426159465791328291538746629174583814653972537982614",
"672315849189647235453298176748952361315764928296183754567821493921436587834579612",
"738461295124953786965728431596217348243685179817349652372596814651874923489132567",
"643921587819573426257468931391784652482695713765312894934257168126849375578136249",
"314986572657231948982457316196523784528764139743819265271698453465372891839145627",
"861579324942813567375624891783452619219368745654791238427135986598246173136987452",
"294678531156439278387125469562783194938241756741596382475962813819354627623817945",
"843195726976482135251763498315624879429817653687359214598241367134976582762538941",
"351467829849253761672198534916345287738926145425781396297814653583679412164532978",
"941873652873652941652941873294187365365294187187365294736529418529418736418736529",
"598237416741956283236418579479362158683571942125849637352684791914723865867195324",
"627815394593247168148369572254931687876524931931786245312498756789652413465173829",
"517642389486937152932851476198374625745286913263195748351429867824763591679518234",
"781243569523691847694857231975362418438719652162584973357926184246178395819435726",
"658793412327416958914582637761824593493157286285639741876941325539278164142365879",
"371862945862945713945713628713628459628459137459137286137286594286594371594371862",
"347625819126498573985371624453289761819567432672143958734952186298716345561834297",
"537281649289436517146957832865312794374869125912745386451698273623174958798523461",
"752861349614329758983574261138245976465798123297136485349652817876413592521987634",
"561293784834617529729548613398764152475132968612859437183475296257986341946321875",
"289756413435192876167834529958261347324578691671943258793625184842319765516487932",
"296134785185276493347859162931482657724965318568713249819627534452391876673548921",
"584197623973642851162358794318769245427835169695421378236514987859273416741986532",
"579413682642985137318672954196248573734159268825367491287591346961734825453826719",
"814329567935867241276541893643295718192786435758134629521473986389652174467918352",
"932685174547312968186749325413826759825497631769531482678154293251963847394278516",
"324198756715364892986527413253971684891436275647285931132749568478653129569812347",
"176359482234618759859274361682493175417526938593187624341865297725931846968742513",
"582491637769532814341678925257386491938124756614957382196845273423719568875263149",
"498627135725139468361845279946712583173568942852394716534276891217983654689451327",
"798364512362519874541827963436198725819275436257643198685931247973452681124786359",
"649175382358492176712863594583947621491236758276581439865324917937618245124759863",
"629385174483176952175249836594837621238614795761952483312768549846593217957421368",
"864593712753126948921487653218639574497851326635274189546912837389745261172368495",
"564382719287519436391764825843295167719436258625178394932857641458621973176943582",
"183965274469827531527413968751349682694278153832651497376192845245786319918534726",
"746591823839672145251384796173965284468723519592148367684257931327419658915836472",
"513846729649572318728139465937421586462358971185697243256713894874965132391284657",
"284751693563942187719836254951387426328694571647125839832419765496578312175263948",
"285739416934681725716542938592314867847265391163978254371896542628453179459127683",
"631784529482695371579213648946578132823149765715326894394861257157932486268457913",
"681924573592376814374815629139642785768539142245187936927468351453791268816253497",
"673492815814635279259718346948351627736924581125876493382169754461587932597243168",
"578629341126347985439581762281963457394875126765412839852194673943756218617238594",
"836142579752936481914875623673218954198654732425793168347589216281467395569321847",
"796482153481935672532167984379826541148359726625714398857643219213598467964271835",
"619243857275986341384517692867429135143758269592361478736892514958134726421675983",
"136789245597412386428635917843176592975824631261953478689247153312598764754361829",
"153672489482159376976834152615798243348265791729413568261947835597381624834526917",
"361795824845213796927864315293657148458132679176489532512976483689341257734528961",
"726483915138569724594217368613794582847152693259836471362941857481675239975328146",
"742398651563712498918546372375824169894651723621937584286173945157489236439265817",
"852914637761238594349576128694781352135429786287653419916845273423197865578362941",
"356287149291534687784916235843769521129453876675128493462371958917845362538692714",
"679154283352869714184273695421938567835617942796425138913582476267341859548796321",
"213985764874361592956472183548127936132659478697834215461593827329748651785216349",
"874521369953476812612893547589614723241937685367258491126785934798342156435169278",
"283795641197643285645812397521938764936574128478261953814329576752186439369457812",
"169384752824756139753192468416538927375219684298467513547821396632945871981673245",
"943625871275981463186734259398547126527168394614392587469853712831279645752416938",
"273196548891754632645328917184275396327619485956483721768942153519837264432561879",
"346175982879624135152893674518769423237541896694238517785316249421957368963482751",
"734198265261573489958264371195326748672845913483719652816432597347951826529687134",
"147682539285934671369175482876213954913458267452769813734596128628341795591827346",
"321476589457893612689512734278639451563147928194285367835924176916758243742361895",
"749516238532897614186234795258741963967358142413962857675123489324689571891475326",
"531984267867532194294761538123478956948256713675319842316897425489625371752143689",
"324685197751429836896317524967231458243568719185794362618943275539872641472156983",
"175386429849125376236497815657234981924851763381679254792513648413768592568942137",
"785426931361789245249135768192368457876254319453971682628547193934812576517693824",
"152397648864125793739648125547219386691583274283476951376852419915764832428931567",
"263954871485217936971638524314876295892543167657129483728461359139785642546392718",
"641923857729518463538647291286195374974236518153874629497352186815469732362781945",
"257436819341978562698512437823659741415827693769143258584291376932765184176384925",
"978125436452936817163847529391754682847612395526398174219563748684271953735489261",
"567928143983714562241635978458163729619287354732459816324591687875346291196872435",
"964352817137894562528671493453216789781439256296785341645927138312568974879143625",
"168297354342658719795413286981735642234861597576924138823579461659142873417386925",
"674895231285413697913726458569148723132679845847352916356984172421567389798231564",
"598614732671253489234978651867591243943782165125346978712865394456139827389427516",
"381647529462519738957832641638974152519326874274185396845791263723468915196253487",
"384267519179453268526981473743596182265814937891372654937125846418639725652748391",
"198352476743689215652147389576834192389215764421796853835921647264578931917463528",
"167489253248356917539712486654893721782541639391627548475168392913275864826934175",
"417256839982473165356198724698534271523817496174962583861749352235681947749325618",
"964218537582673491317954628143597862679842153825361974758126349291435786436789215",
"147538962593426781286917543672351498814792356935684217468279135329165874751843629",
"853492716917536842624817953436179528289354671175268439748623195562941387391785264",
"749153628685274913312968574936512847427386195851497362568721439294635781173849256",
"412683975538297641976145832164972583283456197759318426641739258827564319395821764",
"341895762579236481268471953617542839982713645435689127196354278754128396823967514",
"214385697537946812986172354693418725458627931172539486861753249349261578725894163",
"435192678729846531186357492512984367847623915963571824294738156658219743371465289",
"396251478281794536547836219165483792934627851872915643428379165619548327753162984",
"352916487476853192198274653725168934684329571931745268263497815517682349849531726",
"125783469749261835683594712894326571516947283237158946961875324472639158358412697",
"187463259326895714549721386761938425254617938893254671472186593915342867638579142",
"153294687784165329962738145679841532531926874248573961415387296897612453326459718",
"231749856498156732567823194729568341854312967613497285175934628942681573386275419",
"539682741874531926612974835796825413258413679341796258965147382483259167127368594",
"134785962297461835685392471862547319973126584451839627519678243326914758748253196",
"863957142917642538425183769278365914594218376631794285186579423752436891349821657",
"647398251832517964591624837359742186278169543416853729725936418964281375183475692",
"942671538587239641316584792438157269261948375759362184123896457694725813875413926",
"514379826768251943293846571159783462472165398836492157625918734941637285387524619",
"756298143814536297329471568972345681438619725165782439241853976587964312693127854",
"194875326637492581528613479752961834981534762463728195219357648345286917876149253",
"924687135875123946613594728147265893356948271289731564592316487768452319431879652",
"279645138536981742841237956954816327627493581183572469768359214415728693392164875",
"162754983549832671837916452725198346316245798984367215458673129293481567671529834",
"943752168182639547675184239251863794468971352397245816536427981714598623829316475",
"124985637953167248867243591712596384698314752345728169531479826476852913289631475",
"483651729157492683926873145874936251265714398319528476741385962592167834638249517",
"185637249729154638436829517367518924254793186891462753642371895978245361513986472",
"175683429248917356639452817764895231851236794392174685527369148983741562416528973",
"162495378379628145584713962731586429628349517495271683816937254253864791947152836",
"872316495516249783394578216147983562268157934953624178731465829685792341429831657",
"238591674917436582654728193125849736893617245476352918761284359349165827582973461",
"915263874723841695864795123451682739378459216296137458637928541582314967149576382",
"124985376965327841783146925591672483678439512342518769257891634836254197419763258",
"582679341936451728714823659159346287248517936673298415421965873865732194397184562",
"845169273137524986296378541912746835584231697763985412378452169621893754459617328",
"219367548634581297587294613125738469843926751976145832451873926398652174762419385",
"912564873856237491437918625295386714684179352173425986528743169361892547749651238",
"167593482854612973932478165586139724371284596249756318718325649623941857495867231",
"372964581819725643645381297184296735956137428237458169461873952598612374723549816",
"891375264723946518456281397348592671267813945915764832689157423134628759572439186",
"596481723281357649734692158653874291178239465429516837812945376947163582365728914",
"873694521614258937295731468756483192149527683382916754431869275568172349927345816",
"973628415824153697651974328795432861248516973316789542482391756167845239539267184",
"148357269239461758567892143753946821621578394984213576475139682816724935392685417",
"286753194791284635534196872147635928965428713328971456479362581813547269652819347",
"983472165564318279271965438198634752427591386635287914849753621312846597756129843",
"246759183319684752875123694654237918927816435183495267532971846498562371761348529",
"812753649943682175675491283154237896369845721287169534521974368438526917796318452",
}

theme_RGBA = {}
first = 1
last = 3
	for i = 1, 480 do
	theme_RGBA[i] = tonumber(string.sub(table.concat(themes), first, last))
	first += 3
	last += 3
	end


--FUNCTIONS----------------------------------------------------------------------------------------
function load_puzzle()
puzzle_current = {}
selection = 0
	for i = 1, 81 do
	puzzle_current[i] = string.sub(puzzle_problem[puzzle], i, i)
		if selection == 0 then
			if string.sub(puzzle_problem[puzzle], i, i) == "." then
			selection = i
			end
		end
	end
puzzle_guess = {}
	for i = 1, 81 do
	puzzle_guess[i] = "000000000"
	end
time_best = {}
	for i = 1, 2 do
	time_best[i] = 0
	end
time_best[2] = puzzle_best[puzzle]
	while time_best[2] >= 60 do
	time_best[1] += 1
	time_best[2] -= 60
	end
	if time_best[2] < 10 then
	time_best[2] = "0" .. time_best[2]
	end
	if time_best[1] < 10 then
	time_best[1] = "0" .. time_best[1]
	end
time_current = {}
	for i = 1, 7 do
	time_current[i] = 0
	end
time_current[1] = os.clock()
end

function time()
time_current[2] = os.clock() - time_current[1]
time_current[3] = (string.find(time_current[2], "%."))-1
time_current[4] = 0
time_current[5] = tonumber(string.sub(time_current[2], 1, time_current[3]))
time_current[6] = time_current[5]
	while time_current[5] >= 60 do
	time_current[4] += 1
	time_current[5] -= 60
	end
	if time_current[5] < 10 then
	time_current[5] = "0" .. time_current[5]
	end
	if time_current[4] < 10 then
	time_current[4] = "0" .. time_current[4]
	end
end

function load_theme()
theme_set = {}
theme_color = {}
n = 1
	for i = 1, 120 do
	theme_set[i] = {theme_RGBA[n], theme_RGBA[n+1], theme_RGBA[n+2], theme_RGBA[n+3]}
	theme_color[i] = color.new(theme_RGBA[n], theme_RGBA[n+1], theme_RGBA[n+2], theme_RGBA[n+3])
	n += 4
	end
end


--SCRIPT STORAGE-----------------------------------------------------------------------------------
--[[
---------------------------------------
---------------------------------------
---------------------------------------
---------------------------------------
---------------------------------------
--]]


---------------------------------------------------------------------------------------------------
--INITIALIZATION END-------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------
--MAIN START---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------	
buttons.analogtodpad(0)
buttons.interval(20, 7)
load_puzzle()
load_theme()

	while true do
	power.tick()
	buttons.read()
	touch.read()
	--GUI----------------------------------------------------------------------------
	--Draw main bg
	draw.fillrect(1, 1, 960, 544, theme_color[2+theme_slot])
	--Draw Sudorku logo
	draw.fillrect(643, 10, 222, 63, theme_color[6+theme_slot])
	draw.rect(643, 10, 222, 63, theme_color[1+theme_slot])
	screen.print(IMPACT, 651, 49, "Sudorku", 3, theme_color[12+theme_slot])
	screen.print(IMPACT, 687, 43, "Sudorku", 2, theme_color[10+theme_slot])
		--Draw "<" & ">" (if square button is held), and current puzzle
		if buttons.held.square then
		screen.print(IMPACT, 655, 92, "<                                  >", 1.3, theme_color[10+theme_slot])
		end
		if puzzle_best[puzzle] < 3599 then
		screen.print(IMPACT, 695, 92, "PUZZLE: " .. puzzle, 1.3, theme_color[11+theme_slot])
		else
		screen.print(IMPACT, 695, 92, "PUZZLE: " .. puzzle, 1.3, theme_color[10+theme_slot])
		end
		--Draw difficulty descriptor
		if puzzle >= 1 and puzzle <= 50 then
		screen.print(LSANS, 693, 115, "Difficulty: EASY", 1, theme_color[12+theme_slot])
		end
		if puzzle >= 51 and puzzle <= 100 then
		screen.print(LSANS, 693, 115, "Difficulty: NORMAL", 1, theme_color[12+theme_slot])
		end
		if puzzle >= 101 and puzzle <= 150 then
		screen.print(LSANS, 693, 115, "Difficulty: HARD", 1, theme_color[12+theme_slot])
		end
		if puzzle >= 151 and puzzle <= 200 then
		screen.print(LSANS, 693, 115, "Difficulty: VERY HARD", 1, theme_color[12+theme_slot])
		end
		if puzzle >= 201 then
		screen.print(LSANS, 693, 115, "Difficulty: EXTREME!!!", 1, theme_color[12+theme_slot])
		end
	--Draw time elements
	draw.rect(796, 163, 140, 65, theme_color[1+theme_slot])
	time()
		if puzzle_best[puzzle] < 3599 then
		screen.print(LSANSD, 814, 173, "Best: " .. time_best[1] .. ":" .. time_best[2], 1, theme_color[11+theme_slot])
		else
		screen.print(LSANSD, 814, 173, "Best: " .. time_best[1] .. ":" .. time_best[2], 1, theme_color[10+theme_slot])
		end
	screen.print(LSANSD, 806, 202, "Time: " .. time_current[4] .. ":" .. time_current[5], 1, theme_color[10+theme_slot])
		--Draw theme selector/editor if triangle button is held
		if buttons.held.triangle then
		x = 590
		y = 165
		last = 12+theme_slot
		first = last - 11
		screen.print(CONSOLA, x-20, y-30, "L<               >R", 0.8, theme_color[10+theme_slot])		
		screen.print(CONSOLA, x+12, y-15, "R", 0.8, theme_color[10+theme_slot])
		screen.print(CONSOLA, x+52, y-15, "G", 0.8, theme_color[10+theme_slot])
		screen.print(CONSOLA, x+92, y-15, "B", 0.8, theme_color[10+theme_slot])
		screen.print(CONSOLA, x+132, y-15, "A", 0.8, theme_color[10+theme_slot])
			if theme_slot < 108 then
			screen.print(CONSOLA, x+10, y-30, "Theme: 0" .. (theme_slot/12)+1 .. "/10", 0.8, theme_color[10+theme_slot])
			else
			screen.print(CONSOLA, x+10, y-30, "Theme: " .. (theme_slot/12)+1 .. "/10", 0.8, theme_color[10+theme_slot])
			end
		for i = first, last do
			draw.fillrect(x-20, y+5, 10, 10, theme_color[i])
			draw.rect(x-20, y+5, 10, 10, theme_color[4+theme_slot])					
				if theme_y+theme_slot == i then
				draw.fillrect(x-8, y+3, 168, 13, theme_color[12+theme_slot])
				end
				for i2 = 1, 4 do
				temp = theme_set[i][i2]
					if temp < 10 then temp = "00" .. temp
					elseif temp < 100 then temp = "0" .. temp
					end				
					if theme_y+theme_slot == i and theme_x == i2 then
					screen.print(CONSOLA, x-5, y, "[   ]", 0.8, theme_color[10+theme_slot])
					end
				screen.print(CONSOLA, x+4, y, temp, 0.8, theme_color[10+theme_slot])
				x += 40
				end
			x = 590
			y += 14
			end
		end
		--Draw # missing/incorrect if circle button is held
		if buttons.held.circle then		
		screen.print(CONSOLA, 757, 319, 81-game_complete .. " missing/incorrect", 0.8, theme_color[10+theme_slot])
		end
	--/GUI---------------------------------------------------------------------------

	--Puzzle Grid--------------------------------------------------------------------
	--Draw grid bg elements
	draw.line((spacing*9)+9, starting_y, (spacing*9)+9, (spacing*9)+4, theme_color[1+theme_slot])
	draw.fillrect(starting_x, starting_y, spacing*9, spacing*9, theme_color[6+theme_slot])
	--Draw grid lines
	x = starting_x
	y = starting_y
		for i = 1, 10 do
			if i ~= 1 or i ~= 4 or i ~= 7 or i ~= 10 then
			draw.line(starting_x, y, starting_x+(spacing*9), y, theme_color[3+theme_slot])
			draw.line(x, starting_y, x, starting_y+(spacing*9), theme_color[3+theme_slot])
			end
		x += spacing
		y += spacing
		end
	--Draw grid outlines
	x = starting_x
	y = starting_y
		for i = 1, 10 do
			if i == 1 or i == 4 or i == 7 or i == 10 then
			draw.line(starting_x, y, starting_x+(spacing*9), y, theme_color[4+theme_slot])
			draw.line(x, starting_y, x, starting_y+(spacing*9), theme_color[4+theme_slot])
			end
		x += spacing
		y += spacing
		end
	--Draw number guess/given/chosen and process touch
	x = starting_x
	y = starting_y
	first = 1
	last = 9
		for i = 1, 9 do
			for i2 = first, last do
				if touch.front[1].pressed == true then
					if touch.front[1].x >= x and touch.front[1].x <= x+spacing and touch.front[1].y >= y and touch.front[1].y <= y+spacing then
						if string.sub(puzzle_problem[puzzle], i2, i2) == "." then
						selection = i2
						sound.play(sfx_switch)
						end
					end
				end
			x2 = x
			y2 = y
				if i2 == selection then
				draw.fillrect(x, y, spacing, spacing, theme_color[5+theme_slot])
				end
				for i3 = 1, 9 do
					if i3 == 4 or i3 == 7 then
					x2 = x
					y2 += spacing/3
					end
					if puzzle_current[i2] == "." and string.sub(puzzle_guess[i2], i3, i3) ~= "0" then
					screen.print(LSANS, x2+(spacing/11), y2-(spacing/60), string.sub(puzzle_guess[i2], i3, i3), spacing/90, theme_color[9+theme_slot])
					end
				x2 += spacing/3
				end
				if string.sub(puzzle_problem[puzzle], i2, i2) ~= "." then
				screen.print(LSANSD, x+(spacing/3.3), y+(spacing/2.2), puzzle_current[i2], spacing/34, theme_color[7+theme_slot])
				else
					if puzzle_current[i2] ~= "." then
					screen.print(LSANSD, x+(spacing/3.3), y+(spacing/2.2), puzzle_current[i2], spacing/34, theme_color[8+theme_slot])
					end
				end
			x += spacing
			end
		x = starting_x
		y += spacing
		first += 9
		last += 9
		end
	--/Puzzle Grid-------------------------------------------------------------------

	--Input Grid---------------------------------------------------------------------
	starting_x = starting_x + (spacing*9.6)
	starting_y = starting_y + (spacing*5.8)

	--Draw grid bg elements
	draw.rect(starting_x-8, starting_y-7, (spacing*6)+15, (spacing*3)+15, theme_color[1+theme_slot])
	draw.fillrect(starting_x, starting_y, spacing*6, spacing*3, theme_color[6+theme_slot])
	--Draw grid lines
	x = starting_x
	y = starting_y
		for i = 1, 4 do
			if i ~= 1 or i ~= 4 then
			draw.line(starting_x, y, starting_x+(spacing*6), y, theme_color[3+theme_slot])
			end
		y += spacing
		end
	y = starting_y
		for i = 1, 7 do
			if i ~= 1 or i ~= 7 then
			draw.line(x, starting_y, x, starting_y+(spacing*3), theme_color[3+theme_slot])
			end
		x += spacing
		end
	--Draw grid outlines
	x = starting_x
	y = starting_y
		for i = 1, 4 do
			if i == 1 or i == 4 then
			draw.line(starting_x, y, starting_x+(spacing*6), y, theme_color[4+theme_slot])
			end
		y += spacing
		end
	y = starting_y
		for i = 1, 7 do
			if i == 1 or i == 7 then
			draw.line(x, starting_y, x, starting_y+(spacing*3), theme_color[4+theme_slot])
			end
		x += spacing
		end
	--Draw number guess
	x = starting_x
	y = starting_y
		for i = 1, 9 do
			if i == 4 or i == 7 then
			x = starting_x
			y += spacing+(spacing/3)
			end
		screen.print(LSANS, x+(spacing/11), y-(spacing/60), i, spacing/90, theme_color[9+theme_slot])
		x += spacing+(spacing/3)
		end
	--Process number guess touch
	x = starting_x
	y = starting_y
		for i = 1, 9 do
			if i == 4 or i == 7 then
			x = starting_x
			y += spacing
			end
			if touch.front[1].pressed == true then	
				if touch.front[1].x >= x and touch.front[1].x <= x+spacing and touch.front[1].y >= y and touch.front[1].y <= y+spacing then
				puzzle_current[selection] = "."
					if string.sub(puzzle_guess[selection], i, i) == "0" then
					puzzle_guess[selection] = string.sub(puzzle_guess[selection], 1, i-1) .. i .. string.sub(puzzle_guess[selection], i+1)
					else
					puzzle_guess[selection] = string.sub(puzzle_guess[selection], 1, i-1) .. "0" .. string.sub(puzzle_guess[selection], i+1)
					end
				sound.play(sfx_switch)
				end
			end
		x += spacing
		end
	--Draw number chosen and process touch
	x = starting_x + (spacing*3)
	y = starting_y
		for i = 1, 9 do
			if i == 4 or i == 7 then
			x = starting_x + (spacing*3)
			y += spacing
			end
			if touch.front[1].pressed == true then
				if touch.front[1].x >= x and touch.front[1].x <= x+spacing and touch.front[1].y >= y and touch.front[1].y <= y+spacing then
					if puzzle_current[selection] == i then
					puzzle_current[selection] = "."
					else
					puzzle_current[selection] = i
					end
				sound.play(sfx_switch)
				end
			end
		screen.print(LSANSD, x+(spacing/3.3), y+(spacing/2.2), i, spacing/34, theme_color[8+theme_slot])
		x += spacing
		end

	starting_x = starting_x - (spacing*9.6)
	starting_y = starting_y - (spacing*5.8)
	--/Input Grid--------------------------------------------------------------------

	screen.flip()

	--Process Buttons----------------------------------------------------------------
		--Square button
		if buttons.held.square then
			if buttons.left then
			puzzle -= 1
				if puzzle <= 0 then
				puzzle = 201
				end
			end
			if buttons.down then
			puzzle -= 10
				if puzzle <= 0 then
				puzzle = 1
				end
			end
			if buttons.right then
			puzzle += 1
				if puzzle > 201 then
				puzzle = 1
				end
			end
			if buttons.up then
			puzzle += 10
				if puzzle > 201 then
				puzzle = 201
				end
			end
			if buttons.left or buttons.down or buttons.right or buttons.up then
			load_puzzle()
			end
		end
		if buttons.released.square then
		ini.write(dir .. "config.ini", "puzzle", puzzle)
		end
		--Triangle button
		if buttons.held.triangle then
			if buttons.l then
			theme_slot -= 12
				if theme_slot < 0 then
				theme_slot = 108
				end
			end
			if buttons.r then
			theme_slot += 12
				if theme_slot > 108 then
				theme_slot = 0
				end
			end			
			if buttons.up then
			theme_y -= 1
				if theme_y <= 0 then
				theme_y = 12
				end
			end
			if buttons.down then
			theme_y += 1
				if theme_y > 12 then
				theme_y = 1
				end
			end
			if buttons.left then
			theme_x -= 1
				if theme_x <= 0 then
				theme_x = 4
				end
			end
			if buttons.right then
			theme_x += 1
				if theme_x > 4 then
				theme_x = 1
				end
			end
			if buttons.analogly <= -30 then
				if theme_RGBA[(((theme_y*4)-4)+theme_x)+(4*theme_slot)] < 255 then
				theme_RGBA[(((theme_y*4)-4)+theme_x)+(4*theme_slot)] += 1
				load_theme()
				end
			elseif buttons.analogly >= 30 then
				if theme_RGBA[(((theme_y*4)-4)+theme_x)+(4*theme_slot)] > 0 then
				theme_RGBA[(((theme_y*4)-4)+theme_x)+(4*theme_slot)] -= 1
				load_theme()
				end
			end
		end
		if buttons.released.triangle then
		temp = ""
			for i = 1, 120 do
				for i2 = 1, 4 do
					if string.len(theme_set[i][i2]) == 1 then
					temp = temp .. "00" .. theme_set[i][i2]
					elseif string.len(theme_set[i][i2]) == 2 then
					temp = temp .. "0" .. theme_set[i][i2]
					elseif string.len(theme_set[i][i2]) == 3 then
					temp = temp .. theme_set[i][i2]
					end
				end
			end
		first = 1
		last = 144		
			for i = 1, 10 do
				screen.print(160, 230, "Saving...")
				draw.rect(160, 260, 12, 20, color.white)
				draw.fillrect(161, 261, i-1, 18, color.gray)
				screen.flip()
				if string.sub(table.concat(themes), first, last) ~= string.sub(temp, first, last) then
				ini.write(dir .. "config.ini", "themes[" .. i .. "]", string.sub(temp, first, last))
				themes[i] = ini.read(dir .. "config.ini", "themes[" .. i .. "]", "255255255050000050000255090090090255255255255255255255255030000000000050130130130255255255255255255255255255255255255255255255180255255255255030")
				end
			first += 144
			last += 144
			end
		ini.write(dir .. "config.ini", "theme_slot", theme_slot)
		end
		--Start button
		if buttons.start then
		time_current[7] = os.clock()
			while true do
			buttons.read()
			draw.fillrect(1, 1, 960, 544, theme_color[2+theme_slot])
			draw.rect(7, 7, 948, 532, theme_color[1+theme_slot])
			draw.line(150, 315, 505, 315, theme_color[1+theme_slot])
			draw.line(505, 315, 505, 538, theme_color[1+theme_slot])
			screen.print(LSANSD, 380, 260, "PAUSE", 3, theme_color[10+theme_slot])
			screen.print(CONSOLAB, 30, 300, "GAME CONTROLS", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 320, "TOUCH: Touch left/right grid to make selections", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 340, "SQUARE (held)", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 360, "  + D-PAD RIGHT/LEFT: Change puzzle +/- 1", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 380, "  + D-PAD UP/DOWN: Change puzzle +/- 10", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 400, "TRIANGLE (held)", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 420, "  + L or R: Change theme", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 440, "  + D-PAD: Select color (RGB) or alpha (A) to edit", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 460, "  + Left Analog UP/DOWN: +/- 1 (0-255)", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 480, "CIRCLE (held): Indicate # missing/incorrect", 0.8, theme_color[10+theme_slot])
			screen.print(CONSOLA, 30, 500, "START: Pause/resume game", 0.8, theme_color[10+theme_slot])
			screen.flip()
				if buttons.start then
				break
				end
			end
		time_current[1] += os.clock() - time_current[7]
		end
	--/Process Buttons---------------------------------------------------------------

	--Process Completion-------------------------------------------------------------
	game_complete = 0
		for i = 1, 81 do
			if tostring(puzzle_current[i]) == string.sub(puzzle_solution[puzzle], i, i) then
			game_complete += 1
			end
		end
		if game_complete == 81 then
			if time_current[6] < puzzle_best[puzzle] then
			ini.write(dir .. "config.ini", "puzzle_best[" .. puzzle .. "]", time_current[6])
			puzzle_best[puzzle] = tonumber(ini.read(dir .. "config.ini", "puzzle_best[" .. puzzle .. "]", 3599))
			end
		load_puzzle()
		end
	--/Process Completion------------------------------------------------------------
	end
---------------------------------------------------------------------------------------------------
--MAIN END-----------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------